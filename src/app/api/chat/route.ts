// import { pinecone } from "@/lib/pinecone";
// import { openai } from "@ai-sdk/openai";
// import { OpenAIEmbeddings } from "@langchain/openai";
// import { streamText } from "ai";
// import { PineconeStore } from "@langchain/pinecone";

// // Allow streaming responses up to 30 seconds
// export const maxDuration = 30;

// export async function POST(req: Request) {
//   const { messages } = await req.json();
//   // await vectorizeData("https://ui.shadcn.com/docs");
//   // const embeddings = new OpenAIEmbeddings({
//   //   model: "text-embedding-3-small",
//   // });

//   const pineconeIndex = pinecone.Index("indexedurls");

//   const vectorStore = await PineconeStore.fromExistingIndex(embeddings, {
//     pineconeIndex,
//     namespace: "https:/ui.shadcn.com/docs",
//   });

//   const query = messages[messages.length - 1].content;
//   const results = await vectorStore.similaritySearch(query);
//   console.log(query);

//   const result = await streamText({
//     model: openai("gpt-3.5-turbo-0125"),
//     temperature: 0,
//     prompt: `You are a friendly AI assistant augmented with an Pinecone Vector Store.
//       To help you answer the questions, a context will be provided. This context is generated by querying the vector store with the user question.
//       Answer the question at the end using only the information available in the context and chat history in markdown format like (provide the tittles in bold links in clickable format and codes in code snippet).
//       If the answer is not available in the chat history or context, do not answer the question and politely let the user know that you can only answer if the answer is available in context or the chat history.

//       -------------
//       Chat history:
//       {chat_history}
//       -------------
//       Context:
//       ${results.map((r) => r.pageContent)}
//       -------------

//       Question: ${query}
//       Helpful answer:
//       output format:'
//       useful context¹other useful content².
//       Just like in reasearch papers ¹represents the link from where the text is taken from and so on

//       '
//       `,
//   });

//   return result.toDataStreamResponse();
// }
